<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AaRoney&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.aaroney.com/"/>
  <updated>2017-02-14T22:38:03.832Z</updated>
  <id>http://blog.aaroney.com/</id>
  
  <author>
    <name>Aaron Roney</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Add DocumentDB to your Web App</title>
    <link href="http://blog.aaroney.com/2017/02/11/Add-DocumentDB-to-your-Web-App/"/>
    <id>http://blog.aaroney.com/2017/02/11/Add-DocumentDB-to-your-Web-App/</id>
    <published>2017-02-12T01:49:10.000Z</published>
    <updated>2017-02-14T22:38:03.832Z</updated>
    
    <content type="html"><![CDATA[<div class="toc">

<!-- toc -->
<ul>
<li><a href="#introduction">Introduction</a><ul>
<li><a href="#prerequisites">Prerequisites</a></li>
</ul>
</li>
<li><a href="#build">Build</a><ul>
<li><a href="#create-a-documentdb-with-azure-cli">Create a DocumentDB with Azure CLI</a></li>
<li><a href="#connect-your-web-app-to-documentdb">Connect your Web App to DocumentDB</a><ul>
<li><a href="#obtain-the-primary-master-key">Obtain the primary master key</a></li>
<li><a href="#add-some-documentdb-code">Add some DocumentDB code</a></li>
</ul>
</li>
<li><a href="#test">Test</a></li>
<li><a href="#deploy">Deploy</a></li>
</ul>
</li>
<li><a href="#done">Done</a></li>
</ul>
<!-- tocstop -->
</div>

<h1 id="introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Let’s build add Add <a href="https://azure.microsoft.com/en-us/services/documentdb/" target="_blank" rel="external">DocumentDB</a> to your Web App!  We will be performing all operations using the <a href="https://github.com/Azure/azure-cli" target="_blank" rel="external">Azure CLI</a>, and all of our work will be built using <a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a> on <a href="https://msdn.microsoft.com/en-us/commandline/wsl/about" target="_blank" rel="external">Bash On Windows</a>, Linux, Mac OS, or a container (we’ll containerize our app in a few weeks).  If you have not already, make sure you have a <a href="/2017/02/03/NET-Core-Web-App-in-Azure/" title=".NET Core Web App">.NET Core Web App</a> ready to go!</p>
<h2 id="prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul>
<li>[Required] <a href="https://github.com/Azure/azure-cli" target="_blank" rel="external">Azure CLI</a> (<a href="https://docs.microsoft.com/en-us/cli/azure/install-az-cli2" target="_blank" rel="external">install guide</a>).</li>
<li>[Required] <a href="https://www.microsoft.com/net/core" target="_blank" rel="external">.NET Core</a> (<a href="https://github.com/dotnet/cli" target="_blank" rel="external">CLI 1.0.0-rc4-004800+</a>).</li>
<li>[Required] <a href="https://azure.microsoft.com/en-us/free/" target="_blank" rel="external">Azure Subscription</a>.</li>
<li>[Required] <a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a>.</li>
<li>[Required] <a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">Docker</a>.</li>
</ul>
<h1 id="build"><a href="#Build" class="headerlink" title="Build"></a>Build</h1><blockquote>
<p>NOTE: all command statements with multiple lines ignore the need for a newline escape.</p>
</blockquote>
<h2 id="create-a-documentdb-with-azure-cli"><a href="#Create-a-DocumentDB-with-Azure-CLI" class="headerlink" title="Create a DocumentDB with Azure CLI"></a>Create a DocumentDB with Azure CLI</h2><p>DocumentDB is one of the cutting edge features available in the Azure CLI, so we need to use a nightly (<a href="https://github.com/Azure/azure-cli/pull/1815" target="_blank" rel="external">it’s on the way</a>).  I am going to use <a href="https://www.docker.com/" target="_blank" rel="external">Docker</a> to keep the latest version of Azure CLI separate from my system configuration.  However, if you prever to use the latest build on your machine without Docker, you can <a href="https://github.com/Azure/azure-cli#nightly-builds" target="_blank" rel="external">install the nightly</a>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run -it azuresdk/azure-cli-python:latest</div><div class="line">az login</div><div class="line">az account <span class="built_in">set</span> --subscription <span class="string">"Aaron Personal (MSDN)"</span></div></pre></td></tr></table></figure>
<p>Next, let’s create a new DocumentDB instance.  I am going to add friend-keeping functionality to my app.  I want to keep a list of friends, and some information about them: name, email, phone number, etc.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">az documentdb create -g DemoGroup -n friendsdocdb</div></pre></td></tr></table></figure>
<p>We can then get the endpoint for the DocumentDB we just created.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ az documentdb show -g DemoGroup -n friendsdocdb </div><div class="line">      --query documentEndpoint -o tsv</div><div class="line">https://friendsdocdb.documents.azure.com:443/</div></pre></td></tr></table></figure>
<p>We will need this later, so keep it around.</p>
<h2 id="connect-your-web-app-to-documentdb"><a href="#Connect-your-Web-App-to-DocumentDB" class="headerlink" title="Connect your Web App to DocumentDB"></a>Connect your Web App to DocumentDB</h2><h3 id="obtain-the-primary-master-key"><a href="#Obtain-the-primary-master-key" class="headerlink" title="Obtain the primary master key"></a>Obtain the primary master key</h3><p>In order to connect, we need to get our primary master key for the DocumentDB.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">az documentdb regenerate-key -g DemoGroup -n friendsdocdb --key-kind primary</div><div class="line">az documentdb list-keys -g DemoGroup -n friendsdocdb </div><div class="line">    --query primaryMasterKey -o tsv</div></pre></td></tr></table></figure>
<p>We will need this later, so keep it around.</p>
<h3 id="add-some-documentdb-code"><a href="#Add-some-DocumentDB-code" class="headerlink" title="Add some DocumentDB code"></a>Add some DocumentDB code</h3><p>Let’s add DocumentDB capabilities to our app by adding the proper NuGet packages to our project.  I have created a nice little library called <a href="https://github.com/twitchax/DocumentDb.Fluent" target="_blank" rel="external">DocumentDb.Fluent</a> which drastically improves the DocumentDB interaction experience in .NET.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dotnet add package DocumentDb.Fluent</div><div class="line">dotnet restore</div></pre></td></tr></table></figure>
<p>In any location, you need to create a static DocumentDB connection generator.  I added a new class called <code>Helpers</code> and added my generator; in addition, I created an a <code>Friend</code> class as my document type.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Helpers</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> EndpointUri = <span class="string">"&lt;your_endpoint_uri&gt;"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> PrimaryKey = <span class="string">"&lt;your_primary_key&gt;"</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IDocumentDbInstance DocumentDb =&gt; </div><div class="line">        DocumentDbInstance.Connect(EndpointUri, PrimaryKey);</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IDatabase Db = DocumentDb.Database(<span class="string">"Db"</span>);</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IDocumentCollection&lt;Friend&gt; Friends =&gt; Db.Collection&lt;Friend&gt;();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Friend</span> : <span class="title">HasId</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Next, let’s convert the <code>ValuesController</code> (from our <a href="/2017/02/03/NET-Core-Web-App-in-Azure/" title=".NET Core Web App">.NET Core Web App</a>) into a <code>FriendsController</code>.  I also decided to rename <code>ValuesController.cs</code> to <code>FriendsController.cs</code>.</p>
<p>You may notice that the <a href="https://github.com/twitchax/DocumentDb.Fluent" target="_blank" rel="external">DocumentDb.Fluent</a> library makes all of the calls fairly simple and straightforward.  If you prefer, each of the methods I call has a synchronous version, as well.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">[Route(<span class="string">"api/[controller]"</span>)]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FriendsController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    [HttpGet]</div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Get</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> Ok(Helpers.Friends.Query);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [HttpGet(<span class="string">"&#123;id&#125;"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Get</span>(<span class="params"><span class="keyword">string</span> id</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> friend = <span class="keyword">await</span> Helpers.Friends.Document(id).ReadAsync();</div><div class="line">        <span class="keyword">return</span> Ok(friend);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [HttpPost]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Post</span>(<span class="params">[FromBody]Friend friend</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">var</span> doc = <span class="keyword">await</span> Helpers.Friends.Document().CreateAsync(friend);</div><div class="line">        friend.Id = doc.Id;</div><div class="line">        <span class="keyword">return</span> Created(doc.Id.ToString(), friend);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [HttpPut(<span class="string">"&#123;id&#125;"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Put</span>(<span class="params"><span class="keyword">string</span> id, [FromBody]Friend friend</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">await</span> Helpers.Friends.Document(id).UpdateAsync(friend);</div><div class="line">        <span class="keyword">return</span> Ok();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [HttpDelete]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Delete</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">await</span> Helpers.Friends.ClearAsync();</div><div class="line">        <span class="keyword">return</span> Ok();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [HttpDelete(<span class="string">"&#123;id&#125;"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IActionResult&gt; <span class="title">Delete</span>(<span class="params"><span class="keyword">string</span> id</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">await</span> Helpers.Friends.Document(id).DeleteAsync();</div><div class="line">        <span class="keyword">return</span> Ok();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Optional:</strong> to pretty print JSON, add a formatter to the middleware in <code>Startup.cs</code> that looks like this.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">services.AddMvc().AddJsonOptions(options =&gt; &#123;</div><div class="line">    options.SerializerSettings.Formatting = Formatting.Indented;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>You can use whatever method you prefer to test your new web app interaction with DocumentDB.  In my case, I am using <code>curl</code> with <a href="https://msdn.microsoft.com/en-us/commandline/wsl/about" target="_blank" rel="external">Bash On Windows</a>.</p>
<p>Get friends.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl http://localhost:5000/api/friends</div><div class="line">[]</div></pre></td></tr></table></figure>
<p>Add friend.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ curl -H <span class="string">"Content-Type: application/json"</span> -X POST </div><div class="line">      <span class="_">-d</span> <span class="string">'&#123; "name": "Chelsey", "email": "an@email.com" &#125;'</span> </div><div class="line">      http://localhost:5000/api/friends</div><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"Chelsey"</span>,</div><div class="line">  <span class="string">"email"</span>: <span class="string">"an@email.com"</span>,</div><div class="line">  <span class="string">"id"</span>: <span class="string">"d98ebc3f-67df-4152-a15a-1ad32d473ad1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Update friend.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ curl -H <span class="string">"Content-Type: application/json"</span> -X PUT </div><div class="line">      <span class="_">-d</span> <span class="string">'&#123; "name": "Chelsey", "email": "new@email.com" &#125;'</span> </div><div class="line">      http://localhost:5000/api/friends/d98ebc3f-67df-4152<span class="_">-a</span>15a-1ad32d473ad1</div></pre></td></tr></table></figure>
<p>Delete one friend.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -H <span class="string">"Content-Type: application/json"</span> -X DELETE </div><div class="line">      http://localhost:5000/api/friends/d98ebc3f-67df-4152<span class="_">-a</span>15a-1ad32d473ad1</div></pre></td></tr></table></figure>
<p>Delete all friends.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -H <span class="string">"Content-Type: application/json"</span> -X DELETE </div><div class="line">      http://localhost:5000/api/friends</div></pre></td></tr></table></figure>
<h2 id="deploy"><a href="#Deploy" class="headerlink" title="Deploy"></a>Deploy</h2><p>Just as we did when we built our app, we can <a href="/2017/02/03/NET-Core-Web-App-in-Azure/" title="deploy these changes to Azure with git">deploy these changes to Azure with git</a>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Push this deploy directory to Azure.</span></div><div class="line">git push azure master</div><div class="line"></div><div class="line"><span class="comment"># Restart the app service (optional).</span></div><div class="line">az appservice web restart -g DemoGroup -n AaronDemoHelloApp</div></pre></td></tr></table></figure>
<h1 id="done"><a href="#Done" class="headerlink" title="Done"></a>Done</h1><p>That’s it!  In about 10 minutes, we have added DocumentDB functionality to our web app!</p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;/
    
    </summary>
    
      <category term="Built with Azure Tools" scheme="http://blog.aaroney.com/categories/Built-with-Azure-Tools/"/>
    
    
      <category term="azure" scheme="http://blog.aaroney.com/tags/azure/"/>
    
      <category term="dotnet" scheme="http://blog.aaroney.com/tags/dotnet/"/>
    
      <category term="azure-cli" scheme="http://blog.aaroney.com/tags/azure-cli/"/>
    
      <category term="csharp" scheme="http://blog.aaroney.com/tags/csharp/"/>
    
      <category term="microsoft" scheme="http://blog.aaroney.com/tags/microsoft/"/>
    
      <category term="documentdb" scheme="http://blog.aaroney.com/tags/documentdb/"/>
    
      <category term="docker" scheme="http://blog.aaroney.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Build a .NET Core Web App in Azure</title>
    <link href="http://blog.aaroney.com/2017/02/03/NET-Core-Web-App-in-Azure/"/>
    <id>http://blog.aaroney.com/2017/02/03/NET-Core-Web-App-in-Azure/</id>
    <published>2017-02-03T23:49:24.000Z</published>
    <updated>2017-02-14T22:35:40.677Z</updated>
    
    <content type="html"><![CDATA[
<style>
#burn:before {
  font-family: FontAwesome;
  content: "\f06d";
}
</style>

<div class="toc">

<!-- toc -->
<ul>
<li><a href="#introduction">Introduction</a><ul>
<li><a href="#prerequisites">Prerequisites</a></li>
</ul>
</li>
<li><a href="#build">Build</a><ul>
<li><a href="#create-a-net-core-web-app">Create a .NET Core Web App</a><ul>
<li><a href="#create-the-app">Create the app</a></li>
<li><a href="#add-a-web-api-endpoint">Add a Web API endpoint</a></li>
</ul>
</li>
<li><a href="#publish-to-azure">Publish to Azure</a><ul>
<li><a href="#configure-azure-cli">Configure Azure CLI</a></li>
<li><a href="#create-a-new-web-app-on-azure">Create a new web app on Azure</a></li>
<li><a href="#deploy-to-azure-via-git">Deploy to Azure via git</a></li>
<li><a href="#revel-in-your-awesomeness">Revel in your awesomeness</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#share-optional">Share (optional)</a><ul>
<li><a href="#obtain-a-domain-name">Obtain a domain name</a></li>
<li><a href="#configure-a-domain-name">Configure a domain name</a><ul>
<li><a href="#configure-cname-with-your-registrar">Configure CNAME with your registrar</a></li>
<li><a href="#bind-the-hostname-in-azure">Bind the hostname in Azure</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#done">Done</a></li>
</ul>
<!-- tocstop -->
</div>

<h1 id="introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Let’s build a .NET Core Web App in Azure!  We will be performing all operations using the <a href="https://github.com/Azure/azure-cli" target="_blank" rel="external">Azure CLI</a>, and all of our work will be built using <a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a> on <a href="https://msdn.microsoft.com/en-us/commandline/wsl/about" target="_blank" rel="external">Bash On Windows</a>, Linux, Mac OS, or a container (we’ll containerize our app in a few weeks).</p>
<h2 id="prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><ul>
<li>[Required] <a href="https://github.com/Azure/azure-cli" target="_blank" rel="external">Azure CLI</a> (<a href="https://docs.microsoft.com/en-us/cli/azure/install-az-cli2" target="_blank" rel="external">install guide</a>).</li>
<li>[Required] <a href="https://www.microsoft.com/net/core" target="_blank" rel="external">.NET Core</a> (1.0.0-rc4-004800).</li>
<li>[Required] <a href="https://azure.microsoft.com/en-us/free/" target="_blank" rel="external">Azure Subscription</a>.</li>
<li>[Required] <a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a>.</li>
<li><a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a>.</li>
<li><a href="https://msdn.microsoft.com/en-us/commandline/wsl/about" target="_blank" rel="external">Bash On Windows</a>.</li>
</ul>
<h1 id="build"><a href="#Build" class="headerlink" title="Build"></a>Build</h1><blockquote>
<p>NOTE: all command statements with multiple lines ignore the need for a newline escape.</p>
</blockquote>
<h2 id="create-a-net-core-web-app"><a href="#Create-a-NET-Core-Web-App" class="headerlink" title="Create a .NET Core Web App"></a>Create a .NET Core Web App</h2><h3 id="create-the-app"><a href="#Create-the-app" class="headerlink" title="Create the app"></a>Create the app</h3><p>First, we are going to create a new .NET Web App.  I am going to make a simple “Hello, World!” app.  To your favorite <strong>shell</strong>!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir netcore_hello_world</div><div class="line"><span class="built_in">cd</span> netcore_hello_world</div><div class="line">dotnet new webapi</div></pre></td></tr></table></figure>
<p>Next, we need to test that our app works locally.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dotnet restore</div><div class="line">dotnet run</div></pre></td></tr></table></figure>
<p>At this point, your shell will block, and you can test your app by navigating to the URL specified (in my case, it is <a href="http://localhost:5000/" target="_blank" rel="external">http://localhost:5000/</a>).  Navigate to the simple web api endpoint that is provided by default (i.e., <a href="http://localhost:5000/api/values" target="_blank" rel="external">http://localhost:5000/api/values</a>), and you should see the expected response!</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">"value1"</span>,<span class="string">"value2"</span>]</div></pre></td></tr></table></figure>
<h3 id="add-a-web-api-endpoint"><a href="#Add-a-Web-API-endpoint" class="headerlink" title="Add a Web API endpoint"></a>Add a Web API endpoint</h3><p>I have always wanted to have a website respond to my name, so I am going to add a Web API enpoint to my app which will respond the way I want.  You can add any endpoint you would like here, so have it respond in Klingon: it’s your app, do what you want.</p>
<p>Awesomely enough, ASP.NET Core web apps have Web API routing built in.  In the <code>Controllers</code> directory, all I need do is simply emulate <code>ValuesController.cs</code> to some degree.  My new controller is going to be pretty simple since I just want to say “hello”.  So, I simply create a new controller (<code>Controllers/HelloController.cs</code>), and I add my controller class to it (usings and namespace ommitted).</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HelloController</span> : <span class="title">Controller</span></div><div class="line">&#123;</div><div class="line">    [HttpGet]</div><div class="line">    [Route(<span class="string">"api/hello/&#123;name&#125;"</span>)]</div><div class="line">    <span class="function"><span class="keyword">public</span> IActionResult <span class="title">SayHello</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(name == <span class="string">"Drumpf"</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.BadRequest(<span class="string">"Drumpf?...Really?"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> result = <span class="keyword">new</span> &#123; response = <span class="string">$"Hello, Awesome <span class="subst">&#123;name&#125;</span>‽"</span> &#125;;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Ok(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>You will notice a few key points here:</p>
<ul>
<li><code>[HttpGet]</code> informs the runtime that this method represents an HTTP GET endpoint.</li>
<li><code>[Route(&quot;api/hello/{name}&quot;)]</code> informs the runtime that the endpoint will be located at <code>api/hello</code>, and it takes a parameter, <code>{name}</code>.  This <code>name</code> parameter is reflected in the method signature of <code>SayHello</code>.</li>
<li>By convention, we are returning an <code>IActionResult</code>, which allows us to easily send status codes with our content (e.g., <code>this.Forbid</code>, <code>this.Ok</code>).</li>
</ul>
<p>Next, let’s try our change.  First, <code>Ctrl+C</code> to stop the local web server, and restart the server.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dotnet run</div></pre></td></tr></table></figure>
<p>Navigate to the endpoint, and include your name (e.g., <a href="http://localhost:5000/api/hello/Aaron" target="_blank" rel="external">http://localhost:5000/api/hello/Aaron</a>).  You should see the expected response.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"response"</span> : <span class="string">"Hello, Aaron‽"</span> &#125;</div></pre></td></tr></table></figure>
<p>If “Drumpf” tries, we will get the expected error result (i.e., <code>Drumpf?...Really?</code>, with a <code>400</code> status code).  <span id="burn"></span> </p>
<h2 id="publish-to-azure"><a href="#Publish-to-Azure" class="headerlink" title="Publish to Azure"></a>Publish to Azure</h2><h3 id="configure-azure-cli"><a href="#Configure-Azure-CLI" class="headerlink" title="Configure Azure CLI"></a>Configure Azure CLI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">az login</div><div class="line">az account <span class="built_in">set</span> --subscription <span class="string">"Aaron Personal (MSDN)"</span></div></pre></td></tr></table></figure>
<h3 id="create-a-new-web-app-on-azure"><a href="#Create-a-new-web-app-on-Azure" class="headerlink" title="Create a new web app on Azure"></a>Create a new web app on Azure</h3><p>Using the Azure CLI, we can easily create a new web app instance on Azure.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create a demo group for cleanup.</span></div><div class="line">az group create <span class="_">-l</span> westus -n DemoGroup </div><div class="line"></div><div class="line"><span class="comment"># Create a shared app service plan ($10 / month).</span></div><div class="line">az appservice plan create -g DemoGroup -n DemoAppPlan --sku D1 <span class="comment"># F1 for free tier.</span></div><div class="line"></div><div class="line"><span class="comment"># Name must be unique to all of Azure.</span></div><div class="line">az appservice web create -g DemoGroup -p DemoAppPlan -n AaronDemoHelloApp</div></pre></td></tr></table></figure>
<p>Now, we can verify the host name of our newly created app.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ az appservice web show -g DemoGroup -n AaronDemoHelloApp --query hostNames --out tsv</div><div class="line">aarondemohelloapp.azurewebsites.net</div></pre></td></tr></table></figure>
<p>Navigating to this address (i.e., <a href="http://aarondemohelloapp.azurewebsites.net/" target="_blank" rel="external">http://aarondemohelloapp.azurewebsites.net/</a>) yields a default Azure web app screen.</p>
<h3 id="deploy-to-azure-via-git"><a href="#Deploy-to-Azure-via-git" class="headerlink" title="Deploy to Azure via git"></a>Deploy to Azure via git</h3><p>At the moment, we are just eager to get our app up on Azure.  For now, we will configure deployment using local git.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ az appservice web <span class="built_in">source</span>-control config-local-git -g DemoGroup -n AaronDemoHelloApp --out tsv</div><div class="line">https://twitchax@aarondemohelloapp.scm.azurewebsites.net/AaronDemoHelloApp.git</div></pre></td></tr></table></figure>
<p>However, we need to create a username and password for this deployment endpoint.  Let’s set our deployment credentials through the Azure CLI.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">az appservice web deployment user <span class="built_in">set</span> --user-name twitchax</div></pre></td></tr></table></figure>
<p>You will be prompted to set a password, and that’s it for deployment authentication!</p>
<p>Now, we can push our app straight from our shell with git.  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create a repository and make the first commit.</span></div><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m <span class="string">"First commit!"</span></div><div class="line"></div><div class="line"><span class="comment"># Add the Azure endpoint (make sure to use your endpoint).</span></div><div class="line">git remote add azure https://twitchax@aarondemohelloapp.scm.azurewebsites.net/AaronDemoHelloApp.git</div><div class="line"></div><div class="line"><span class="comment"># Push this deploy directory to Azure.</span></div><div class="line">git push azure master</div><div class="line"></div><div class="line"><span class="comment"># Restart the app service (optional).</span></div><div class="line">az appservice web restart -g DemoGroup -n AaronDemoHelloApp</div></pre></td></tr></table></figure>
<h3 id="revel-in-your-awesomeness"><a href="#Revel-in-your-awesomeness" class="headerlink" title="Revel in your awesomeness"></a>Revel in your awesomeness</h3><p>Navigate to your azure domain address (i.e., <a href="http://aarondemohelloapp.azurewebsites.net/api/hello/Aaron" target="_blank" rel="external">http://aarondemohelloapp.azurewebsites.net/api/hello/Aaron</a>) to test your deployment.  It’s alive!</p>
<h1 id="share-optional"><a href="#Share-optional" class="headerlink" title="Share (optional)"></a>Share (optional)</h1><p>At this point, we can share our domain name with the world!  However, if we would like, we can fairly easily buy a custom domain and point that new domain (or a subdomain) at our new web app.</p>
<h2 id="obtain-a-domain-name"><a href="#Obtain-a-domain-name" class="headerlink" title="Obtain a domain name"></a>Obtain a domain name</h2><p>Go buy a domain name.  I mean, why not?  Most of them are as low as <strong>$12 / year</strong>.  I, personally, use <a href="https://domains.google/#/" target="_blank" rel="external">Google Domains</a>, but you can use your favorite service.</p>
<h2 id="configure-a-domain-name"><a href="#Configure-a-domain-name" class="headerlink" title="Configure a domain name"></a>Configure a domain name</h2><h3 id="configure-cname-with-your-registrar"><a href="#Configure-CNAME-with-your-registrar" class="headerlink" title="Configure CNAME with your registrar"></a>Configure CNAME with your registrar</h3><p>I added a CNAME record for <code>helloapp.twitchax.com</code> to <code>aarondemohelloapp.azurewebsites.net</code>.  In Google Domains, you just find your domain and click “DNS”.  Then, add a “custom resource record” which points to your web app.</p>
<img src="/2017/02/03/NET-Core-Web-App-in-Azure/add_cname.png" alt="Add a CNAME in Google Domains." title="Add a CNAME in Google Domains.">
<h3 id="bind-the-hostname-in-azure"><a href="#Bind-the-hostname-in-Azure" class="headerlink" title="Bind the hostname in Azure"></a>Bind the hostname in Azure</h3><p>Azure requires that we specify which custom domains are allowed to point to our web app.  So, back to the trusty Azure CLI, and we can bind to our custom domain name with one, simple command.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">az appservice web config hostname add -g DemoGroup --webapp AaronDemoHelloApp </div><div class="line">    -n helloapp.twitchax.com</div></pre></td></tr></table></figure>
<p><strong>NOTE: There is currently a bug (<a href="https://github.com/Azure/azure-cli/issues/1984" target="_blank" rel="external">#1984</a>) in Azure CLI which prevents adding a host name, but a <a href="https://github.com/Azure/azure-cli/pull/1985" target="_blank" rel="external">proposed fix</a> is on the way!  This same operation can be completed in the Azure Portal for the time being (Settings &gt;&gt; Custom domains).</strong></p>
<h1 id="done"><a href="#Done" class="headerlink" title="Done"></a>Done</h1><p>That’s it!  In about 10 minutes, we have built our web app and pushed it to Azure!</p>
<p>Next week, we will add some data to our web app, so stay tuned.</p>
]]></content>
    
    <summary type="html">
    
      
&lt;style&gt;
#burn:before {
  font-family: FontAwesome;
  content: &quot;\f06d&quot;;
}
&lt;/style&gt;

&lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#intro
    
    </summary>
    
      <category term="Built with Azure Tools" scheme="http://blog.aaroney.com/categories/Built-with-Azure-Tools/"/>
    
    
      <category term="azure" scheme="http://blog.aaroney.com/tags/azure/"/>
    
      <category term="dotnet" scheme="http://blog.aaroney.com/tags/dotnet/"/>
    
      <category term="azure-cli" scheme="http://blog.aaroney.com/tags/azure-cli/"/>
    
      <category term="csharp" scheme="http://blog.aaroney.com/tags/csharp/"/>
    
      <category term="microsoft" scheme="http://blog.aaroney.com/tags/microsoft/"/>
    
      <category term="vscode" scheme="http://blog.aaroney.com/tags/vscode/"/>
    
  </entry>
  
</feed>
